@page "/shelfpage"
@using global::Shared.Model
@using BlazerWASM.StateContainer
@using global::Shared.DTOs
@using global::Shared.DTOs.Item
@using global::Shared.DTOs.ItemType
@using HttpClients.ClientInterfaces
@using UIComponents
@using System.Reflection.Emit
@using System.Security.Cryptography
@using BlazerWASM.ClassesOnlyUsedOnBlazer
@using global::Shared.DTOs.Shelf
@inject HttpClient Http

@inject AddNewItemBeginState NewItemBeginState;
@inject IItemService ItemService;
@inject IShelfService ShelfService;
@inject IItemTypeService ItemTypeService;

<h3 class="text-center mb-5">ShelfPage</h3>


<div class="container-fluid mt-3 ">
    <div class="row">
    <div class="col-sm-6">

        <table class="table ">
            <tr>
                <td class="border-1 text-center fw-bold">
                    <label >Vare nummer: @NewItemBeginState.Id</label>
                </td>

            </tr>
            <tr>
                <td><label>antal du skal placere: @NewItemBeginState.Amount</label> </td>
            </tr>
            <tr>
                <td>
                    @if (_itemType == null)
                    {
                        <label>vare Info hentes</label>
                    }
                    else{
                    <label>Vare info : dimX = @_itemType.DimX dimY =@_itemType.DimY dimZ = @_itemType.DimZ</label>
                    }
                </td>
            </tr>
        </table>
    </div>

    <div class="col-sm-6">
        <table class="table">
            
            <tr class="border-1">
                <th>Shelf ID</th>
                <th>Room For</th>
                <th>Input Wished</th>

            </tr>
            
            <tbody>
            @if (_glqt == null)
            {
                <label>loading ShelfInfo</label>
            }
            else{
            @foreach (AmountSpaceRow item in list)
            {

                <tr>

                    <td>@item.ShelfID</td>
                    <td>@item.AvalibleSpace</td>
                <td><input type="number"  bind="@item.Antal" /></td>
                    <td><label></label></td>

                </tr>
            }
            }

            </tbody>
        </table>
        <button type="button" name="klik" onclick="@ButtonReserver()">klik</button>
        @resultMsg
    </div>
</div>
</div>
@code {
    private int? ShelfId;
    private int? AvalibleCapacity;
    private int? InputWished;
     
    private ItemType? _itemType;

    private string resultMsg ="";
    
    List<AmountSpaceRow> list;
    
    private ItemRegisterRequestDto _glqt;

    protected override async Task OnInitializedAsync()
    {
      try{
          _glqt = await ShelfService.GetAmountOnShelf(new ItemTypeSearchDto(NewItemBeginState.Id));
          
          list = new List<AmountSpaceRow>();
          
          foreach (AmountOnSpaceDto shelf in _glqt.ShelfInfo)
          {
              list.Add(new AmountSpaceRow(1,(int)shelf.AvalibleSpace!,shelf.ShelfId));
          }
          
      }
      catch (Exception e)
      {
          resultMsg = e.Message;
      }
        try
        {
            _itemType = await ItemTypeService.ReadAsync(new ItemTypeSearchDto(NewItemBeginState.Id));
            
        }
        catch (Exception e)
        {
            resultMsg += e.Message;
        }
    }

    private Task ChangeAntal(string shelfId, int antal)
    {
        foreach (var rowInfo in list)
        {
            if (rowInfo.ShelfID.Equals(shelfId))
            {
                rowInfo.Antal = antal;
                return Task.CompletedTask;
            }
        }
        return Task.CompletedTask;
    }

    private async Task ButtonReserver()
    {
        List<AmountOnSpaceDto> requestlist = new List<AmountOnSpaceDto>();
        foreach (var getinfo in list)
        {
            requestlist.Add(new AmountOnSpaceDto(getinfo.ShelfID, getinfo.Antal));
        }
        ShelfAddItemRequestDto shelfAdd = new ShelfAddItemRequestDto(NewItemBeginState.Id, requestlist, new User(0, "0"));
        
        try
        {
            await ShelfService.AddItemToShelf(shelfAdd);

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        
        
    }

}